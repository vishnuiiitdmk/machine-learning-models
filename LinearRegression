{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "19503ace",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "643dc55f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinearRegression:\n",
    "    def __init__(self,learning_rate,no_of_iterations):\n",
    "        self.alpha=learning_rate\n",
    "        self.it=no_of_iterations\n",
    "    def fit(self,x,y):\n",
    "        self.x=x\n",
    "        self.y=y\n",
    "        self.m,self.n=x.shape\n",
    "#         initilising the weights and bias \n",
    "        self.w=np.zeros(self.n)\n",
    "        self.b=0\n",
    "#         gradient descent algo algorithm for linear_regression\n",
    "        for i in range(self.it):\n",
    "            self.update_weights()\n",
    "    def update_weights(self):\n",
    "        dw=-(2*(self.x.T).dot(self.y-self.predict(self.x)))/(self.m)\n",
    "        db=-(2* np.sum(self.y-self.predict(self.x)))/self.m\n",
    "        self.w=self.w - self.alpha*dw\n",
    "        self.b=self.b - self.alpha*db\n",
    "    def predict(self,x):\n",
    "        return x.dot(self.w)+self.b"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
